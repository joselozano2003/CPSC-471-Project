
generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
    id           String   @id @default(cuid())
    provider     String
    providerId   String
    providerData Json
    userId       String
    user         User     @relation(fields: [userId], references: [id])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    user         User     @relation(fields: [userId], references: [id])
    expires      DateTime
    createdAt    DateTime @default(now())
}


// Person is user
model User {
	// Authentication fields
    id            String           @id @default(cuid())
    createdAt     DateTime         @default(now())
    updatedAt     DateTime         @updatedAt
    email         String           @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]

	// Our schema fields
	gender                	String
    name                  	String
    address               	String
    birthDate             	DateTime
    phone                 	String
    emergencyContactName  	String
    emergencyContactPhone 	String
    staff                 	Staff?
    patient               	Patient?
	insurancePolicy       	InsurancePolicy?
}

model VerificationToken {
    identifier 				String
    token      				String   @unique
    expires    				DateTime

  @@unique([identifier, token])
}

// Our schema fields

model Staff {
    id                      String @id @default(cuid())
    userId				  	String @unique
	user                  	User @relation(fields: [userId], references: [id])

    medicalStaff            MedicalStaff?  
    administrativeStaff     AdministrativeStaff?
    isVolunteer             Boolean
}

model AdministrativeStaff {
    id                    	String @id @default(cuid())
    staff                 	Staff @relation(fields: [staffId], references: [id])
    staffId               	String @unique
	appointments          	Appointment[]
	medicalTests          	MedicalTest[]
}

model MedicalStaff {
    id                    	String @id @default(cuid())
    staff                 	Staff @relation(fields: [staffId], references: [id])
    staffId               	String @unique
    nurse                 	Nurse?      
    physician             	Physician?
    pharmacist            	Pharmacist?
}

model Nurse {
    id                    	String @id @default(cuid())
    staffId               	String @unique
    staff                 	MedicalStaff @relation(fields: [staffId], references: [id])
    department            	String
    patients              	Patient[]
}

model Physician {
    id                    	String @id @default(cuid())
    staffId               	String @unique
    staff                 	MedicalStaff @relation(fields: [staffId], references: [id])
    specialty             	String
    department            	String
    patients              	Patient[]
	appointments          	Appointment[]
	medicalTests          	MedicalTest[]
	createdRecords        	MedicalRecord[]
}

model Pharmacist {
    id                    	String @id @default(cuid())
    staffId               	String @unique
    staff                 	MedicalStaff @relation(fields: [staffId], references: [id])
    pharmacyId            	String
    pharmacy              	Pharmacy @relation(fields: [pharmacyId], references: [id])
}
model Pharmacy {
    id                    	String @id @default(cuid())
    name                  	String
    address               	String
    phone                 	String
    pharmacists           	Pharmacist[]
    inventory             	PharmacyInventory[]
}

model Medication {
    id                    	String @id @default(cuid())
    name                  	String
    description           	String
    sideEffects           	String
    dosage                	String
    price                 	Float
    grams                 	Float
    inventory             	PharmacyInventory[]
}

model PharmacyInventory {
    id                    	String @id @default(cuid())
    pharmacyId            	String
    pharmacy              	Pharmacy @relation(fields: [pharmacyId], references: [id])
    medicationId          	String
    medication            	Medication @relation(fields: [medicationId], references: [id])
    quantity              	Int
}

model Patient {
    id                    	String @id @default(cuid())
    userId             		String @unique
    user                	User @relation(fields: [userId], references: [id])

    height                	Float?
    weight                	Float?
    nurses                	Nurse[]
    physicianId           	String
    physician             	Physician @relation(fields: [physicianId], references: [id])
	appointments          	Appointment[]
	medicalTests          	MedicalTest[]
	medicalRecord        	MedicalRecord?
}

model Appointment {
	id 						String @id @default(cuid())
	patientId 				String
	patient 				Patient @relation(fields: [patientId], references: [id])
	physicianId 			String
	physician 				Physician @relation(fields: [physicianId], references: [id])
	startDate 				DateTime
	endDate					DateTime
	adminId 				String
	scheduledBy 			AdministrativeStaff @relation(fields: [adminId], references: [id])
	location 				String
	notes 					String
}

model MedicalTest {
	id 						String @id @default(cuid())
	name 					String
	patientId 				String
	patient 				Patient @relation(fields: [patientId], references: [id])
	physicianId 			String
	physician 				Physician @relation(fields: [physicianId], references: [id])
	adminId 				String
	scheduledBy 			AdministrativeStaff @relation(fields: [adminId], references: [id])
	date 					DateTime
	location 				String
	medicalReportId 		String
	medicalReport 			MedicalReport @relation(fields: [medicalReportId], references: [id])
}

model MedicalRecord {
	id 						String 	@id @default(cuid())
	patientId 				String 	@unique
	patient 				Patient @relation(fields: [patientId], references: [id])
	medicalReports 			MedicalReport[]
	physicianId 			String
	createdBy 				Physician @relation(fields: [physicianId], references: [id])
}


model MedicalReport {
	id 						String @id @default(cuid())
	medicalRecordId 		String
	medicalRecord 			MedicalRecord @relation(fields: [medicalRecordId], references: [id])
	medicalTestId 			String 
	medicalTest 			MedicalTest []
	notes 					String
	treatment 				String
	diagnostics 			String
	date 					DateTime
}

model InsuranceCompany {
	id 						String @id @default(cuid())
	name 					String
	address 				String
	contactInfo 			Json
	policies 				InsurancePolicy[]
}

model InsurancePolicy {
	id 						String @id @default(cuid())
	expirationDate 			DateTime
	insuranceCompanyId 		String
	insuranceCompany 		InsuranceCompany @relation(fields: [insuranceCompanyId], references: [id])
	coverageAmount 			Float
	userId 					String @unique
	patient 				User @relation(fields: [userId], references: [id])
}


